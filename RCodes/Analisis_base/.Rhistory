library(ggplot2)
library(qplot)
library(expss)
library(kableExtra)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
load("./Estadisticos_precios_01.RData") #Tabla generada de L1 cuadro1
#Agregado
qplot(PInt_count, data = Estadisticos , geom = "density", main="Grafico de densidad-Agregado", xlab = "Numero de precios por ID")
qplot(PInt_count, data = Estadisticos, geom = "histogram", main="Histograma del número de precios-Agregado", binwidth =8, ylab ="Count"  ,xlab = "Numero de precios por ID")
View(Estadisticos)
#########
#Labor 1#
#########
"L1: Este script elabora dos tablas donde dependiendo de la base de datos ha trabajar elabora un cuadro de estadisticas (min,max,mean) de los precios
por cada producto y la siguiente tabla sintentiza la base por sus categorias, asi como el n?mero de observaciones por cada divisi?n"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(expss)
library(kableExtra)
options(digits = 3)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Cargamos base de datos completa"
load(paste0(dirmother, "/Base/Base_Final_Peru_completa_01.RData")) #Insertar la base de datos a trabajar
#load(paste0(dirmother, "/Base/Base_filtradas/03_Base_filtrada_2017_2019.RData"))
BD = base_ll #Renombrarla para poder correr todo el script
BD$ID <- as.factor(BD$ID)
rm(base_ll)
BD <- droplevels(BD)
min(BD$fecha)#Primer registro de un producto
max(BD$fecha)#Ultimo registro de un producto
"Numero de items en la base"
length(levels(unique(BD$ID))) #14301
"Numero de ves que cada item ha aparecido en el tiempo"
Num1 = count(BD, vars = ID)
View(BD)
View(Num1)
View(BD)
Summary <- data.frame(
aggregate(precio_internet_completo~ID, data=BD, min),
aggregate(precio_internet_completo~ID, data=BD, max),
aggregate(precio_internet_completo~ID, data=BD, mean),
aggregate(precio_normal_completo~ID, data=BD, min),
aggregate(precio_normal_completo~ID, data=BD, max),
aggregate(precio_normal_completo~ID, data=BD, mean)
)
View(Summary)
Summary <- Summary[,c(1,2,4,6,8,10,12)]
colnames(Summary) <- c("ID", "internet_min", "internet_max", "internet_mean","normal_min","normal_max","normal_mean")
View(Summary)
Summarya <- data.frame(
aggregate(precio_member_completo~ID, data=BD, min),
aggregate(precio_member_completo~ID, data=BD, max),
aggregate(precio_member_completo~ID, data=BD, mean)
)
Summarya <- Summarya[,c(1,2,4,6)]
colnames(Summarya) <- c("ID", "member_min", "member_max", "member_mean")
#Merge /// Ambas tablas anteriores
Estadisticos = left_join(Summary,Summarya)
Estadisticos$PNormal_count = NA
Estadisticos$PMemb_count= NA
Estadisticos$PInt_count = NA
for (ii in 1:nrow(Estadisticos)) {
BD1 = filter(BD, ID == ii)
BD1 = droplevels(BD1)
Estadisticos$PNormal_count[ii] = length(which(BD1$precio_normal_completo != "NA"))
Estadisticos$PMemb_count[ii] = length(which(BD1$precio_member_completo != "NA"))
Estadisticos$PInt_count[ii] = length(which(BD1$precio_internet_completo != "NA"))
}
ID = BD %>% group_by(categoria,ID) %>% distinct(ID)
Estadisticos = merge(Estadisticos,ID , by = "ID")
Estadisticos = Estadisticos[order(Estadisticos$ID),] #Agregamos categoria y ordenamos
#sv_name = paste0("H:/SGInvEco/ALMACEN_TRABAJO/Alexandra/Pass-through/Analisis_base/","Estadisticos_precios_01", ".RData")
sv_name = "./Estadisticos_precios_01RData"
save(Estadisticos, file = sv_name)
#kable(Table2, "latex", booktabs = T)
#Tabla2 (Resume la base de datos segun sus categorías)
"Numero de observaciones por categoría"
cat = Estadisticos %>% group_by(categoria) %>% tally()
dat = Estadisticos %>% group_by(categoria) %>% summarise(observaciones = sum(PInt_count))
cat = merge(cat, dat, by ="categoria")
rm(dat,ID,Summary,Summarya)
cat$obs_item = cat$observaciones/cat$n
#########
#Labor 2#
#########
"L2: Este script genera graficos de densidad e histogramas del n?mero de precios por cada tipo de precio de la base(normal, internet o member) asi como para cada categoria"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(qplot)
library(expss)
library(kableExtra)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Tabla del proceso anterior"
load("./Estadisticos_precios_01.RData") #Tabla generada de L1 cuadro1
qplot(PInt_count, data = Estadisticos, geom = "histogram", main="Histograma del número de precios-Agregado", binwidth =8, ylab ="Count"  ,xlab = "Numero de precios por ID")
View(Estadisticos)
#########
#Labor 1#
#########
"L1: Este script elabora dos tablas donde dependiendo de la base de datos ha trabajar elabora un cuadro de estadisticas (min,max,mean) de los precios
por cada producto y la siguiente tabla sintentiza la base por sus categorias, asi como el n?mero de observaciones por cada divisi?n"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(expss)
library(kableExtra)
options(digits = 3)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Cargamos base de datos completa"
load(paste0(dirmother, "/Base/Base_Final_Peru_completa_01.RData")) #Insertar la base de datos a trabajar
#load(paste0(dirmother, "/Base/Base_filtradas/03_Base_filtrada_2017_2019.RData"))
BD = base_ll #Renombrarla para poder correr todo el script
BD$ID <- as.factor(BD$ID)
rm(base_ll)
BD <- droplevels(BD)
"Periodo de estudio"
min(BD$fecha)#Primer registro de un producto
max(BD$fecha)#Ultimo registro de un producto
"Numero de items en la base"
length(levels(unique(BD$ID))) #14301
"Numero de ves que cada item ha aparecido en el tiempo"
Num1 = count(BD, vars = ID)
"Estadisticos"
Summary <- data.frame(
aggregate(precio_internet_completo~ID, data=BD, min),
aggregate(precio_internet_completo~ID, data=BD, max),
aggregate(precio_internet_completo~ID, data=BD, mean),
aggregate(precio_normal_completo~ID, data=BD, min),
aggregate(precio_normal_completo~ID, data=BD, max),
aggregate(precio_normal_completo~ID, data=BD, mean)
)
Summary <- Summary[,c(1,2,4,6,8,10,12)]
colnames(Summary) <- c("ID", "internet_min", "internet_max", "internet_mean","normal_min","normal_max","normal_mean")
Summarya <- data.frame(
aggregate(precio_member_completo~ID, data=BD, min),
aggregate(precio_member_completo~ID, data=BD, max),
aggregate(precio_member_completo~ID, data=BD, mean)
)
Summarya <- Summarya[,c(1,2,4,6)]
colnames(Summarya) <- c("ID", "member_min", "member_max", "member_mean")
#Merge /// Ambas tablas anteriores
Estadisticos = left_join(Summary,Summarya)
Estadisticos$PNormal_count = NA
Estadisticos$PMemb_count= NA
Estadisticos$PInt_count = NA
for (ii in 1:nrow(Estadisticos)) {
BD1 = filter(BD, ID == ii)
BD1 = droplevels(BD1)
Estadisticos$PNormal_count[ii] = length(which(BD1$precio_normal_completo != "NA"))
Estadisticos$PMemb_count[ii] = length(which(BD1$precio_member_completo != "NA"))
Estadisticos$PInt_count[ii] = length(which(BD1$precio_internet_completo != "NA"))
}
ID = BD %>% group_by(categoria,ID) %>% distinct(ID)
Estadisticos = merge(Estadisticos,ID , by = "ID")
Estadisticos = Estadisticos[order(Estadisticos$ID),] #Agregamos categoria y ordenamos
#sv_name = paste0("H:/SGInvEco/ALMACEN_TRABAJO/Alexandra/Pass-through/Analisis_base/","Estadisticos_precios_01", ".RData")
sv_name = "./Estadisticos_precios_01.RData"
save(Estadisticos, file = sv_name)
#kable(Table2, "latex", booktabs = T)
#Tabla2 (Resume la base de datos segun sus categorías)
"Numero de observaciones por categoría"
cat = Estadisticos %>% group_by(categoria) %>% tally()
dat = Estadisticos %>% group_by(categoria) %>% summarise(observaciones = sum(PInt_count))
cat = merge(cat, dat, by ="categoria")
rm(dat,ID,Summary,Summarya)
cat$obs_item = cat$observaciones/cat$n
qplot(PInt_count, data = Estadisticos, geom = "histogram", main="Histograma del número de precios-Agregado", binwidth =8, ylab ="Count"  ,xlab = "Numero de precios por ID")
#########
#Labor 2#
#########
"L2: Este script genera graficos de densidad e histogramas del n?mero de precios por cada tipo de precio de la base(normal, internet o member) asi como para cada categoria"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(qplot)
library(expss)
library(kableExtra)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Tabla del proceso anterior"
load("./Estadisticos_precios_01.RData") #Tabla generada de L1 cuadro1
View(Estadisticos)
#########
#Labor 1#
#########
"L1: Este script elabora dos tablas donde dependiendo de la base de datos ha trabajar elabora un cuadro de estadisticas (min,max,mean) de los precios
por cada producto y la siguiente tabla sintentiza la base por sus categorias, asi como el n?mero de observaciones por cada divisi?n"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(expss)
library(kableExtra)
options(digits = 3)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Cargamos base de datos completa"
load(paste0(dirmother, "/Base/Base_Final_Peru_completa_01.RData")) #Insertar la base de datos a trabajar
#load(paste0(dirmother, "/Base/Base_filtradas/03_Base_filtrada_2017_2019.RData"))
BD = base_ll #Renombrarla para poder correr todo el script
BD$ID <- as.factor(BD$ID)
rm(base_ll)
View(BD)
ids <- BD[["ID",]]
ids <- BD[["ID"]]
ids
ids <- Estadisticos[["ID"]]
#########
#Labor 1#
#########
"L1: Este script elabora dos tablas donde dependiendo de la base de datos ha trabajar elabora un cuadro de estadisticas (min,max,mean) de los precios
por cada producto y la siguiente tabla sintentiza la base por sus categorias, asi como el n?mero de observaciones por cada divisi?n"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(expss)
library(kableExtra)
options(digits = 3)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Cargamos base de datos completa"
load(paste0(dirmother, "/Base/Base_Final_Peru_completa_01.RData")) #Insertar la base de datos a trabajar
#load(paste0(dirmother, "/Base/Base_filtradas/03_Base_filtrada_2017_2019.RData"))
BD = base_ll #Renombrarla para poder correr todo el script
BD$ID <- as.factor(BD$ID)
rm(base_ll)
BD <- droplevels(BD)
"Periodo de estudio"
min(BD$fecha)#Primer registro de un producto
max(BD$fecha)#Ultimo registro de un producto
"Numero de items en la base"
length(levels(unique(BD$ID))) #14301
"Numero de ves que cada item ha aparecido en el tiempo"
Num1 = count(BD, vars = ID)
"Estadisticos"
Summary <- data.frame(
aggregate(precio_internet_completo~ID, data=BD, min),
aggregate(precio_internet_completo~ID, data=BD, max),
aggregate(precio_internet_completo~ID, data=BD, mean),
aggregate(precio_normal_completo~ID, data=BD, min),
aggregate(precio_normal_completo~ID, data=BD, max),
aggregate(precio_normal_completo~ID, data=BD, mean)
)
Summary <- Summary[,c(1,2,4,6,8,10,12)]
colnames(Summary) <- c("ID", "internet_min", "internet_max", "internet_mean","normal_min","normal_max","normal_mean")
Summarya <- data.frame(
aggregate(precio_member_completo~ID, data=BD, min),
aggregate(precio_member_completo~ID, data=BD, max),
aggregate(precio_member_completo~ID, data=BD, mean)
)
Summarya <- Summarya[,c(1,2,4,6)]
colnames(Summarya) <- c("ID", "member_min", "member_max", "member_mean")
#Merge /// Ambas tablas anteriores
Estadisticos = left_join(Summary,Summarya)
Estadisticos$PNormal_count = NA
Estadisticos$PMemb_count= NA
Estadisticos$PInt_count = NA
#Vector a utilizar en el loop siguente
ids <- Estadisticos[["ID"]]
ids
ii = 1
for (ii in ids) {
BD1 = filter(BD, ID == ids)
BD1 = droplevels(BD1)
Estadisticos$PNormal_count[ii] = length(which(BD1$precio_normal_completo != "NA"))
Estadisticos$PMemb_count[ii] = length(which(BD1$precio_member_completo != "NA"))
Estadisticos$PInt_count[ii] = length(which(BD1$precio_internet_completo != "NA"))
ii = ii + 1
}
nrow(Estadisticos)
ids[ii]
ids <- Estadisticos[["ID"]]
ids
ids[1]
ids[ii]
ii = 1
ids[ii]
ids <- Estadisticos[["ID"]]
ii = 1
for (ii in 1:nrow(Estadisticos)) {
BD1 = filter(BD, ID == ids[ii])
BD1 = droplevels(BD1)
Estadisticos$PNormal_count[ii] = length(which(BD1$precio_normal_completo != "NA"))
Estadisticos$PMemb_count[ii] = length(which(BD1$precio_member_completo != "NA"))
Estadisticos$PInt_count[ii] = length(which(BD1$precio_internet_completo != "NA"))
ii = ii + 1
}
ID = BD %>% group_by(categoria,ID) %>% distinct(ID)
Estadisticos = merge(Estadisticos,ID , by = "ID")
Estadisticos = Estadisticos[order(Estadisticos$ID),] #Agregamos categoria y ordenamos
#sv_name = paste0("H:/SGInvEco/ALMACEN_TRABAJO/Alexandra/Pass-through/Analisis_base/","Estadisticos_precios_01", ".RData")
sv_name = "./Estadisticos_precios_01.RData"
save(Estadisticos, file = sv_name)
#Tabla2 (Resume la base de datos segun sus categorías)
"Numero de observaciones por categoría"
cat = Estadisticos %>% group_by(categoria) %>% tally()
dat = Estadisticos %>% group_by(categoria) %>% summarise(observaciones = sum(PInt_count))
cat = merge(cat, dat, by ="categoria")
rm(dat,ID,Summary,Summarya)
cat$obs_item = cat$observaciones/cat$n
View(cat)
#########
#Labor 2#
#########
"L2: Este script genera graficos de densidad e histogramas del n?mero de precios por cada tipo de precio de la base(normal, internet o member) asi como para cada categoria"
rm(list=ls())
#install.packages("expss")
"Cargamos librerias a utilizar"
options(warn=0)
library(tidyverse)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
library(qplot)
library(expss)
library(kableExtra)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Tabla del proceso anterior"
load("./Estadisticos_precios_01.RData") #Tabla generada de L1 cuadro1
qplot(PInt_count, data = Estadisticos, geom = "histogram", main="Histograma del número de precios-Agregado", binwidth =8, ylab ="Count"  ,xlab = "Numero de precios por ID")
qplot(PInt_count, data = Estadisticos, geom = "histogram", main="Histograma-Precio Internet", binwidth =5, ylab ="Count"  ,xlab = "Numero de precios por ID", fill = categoria)
#Internet
qplot(PInt_count, data = Estadisticos, geom = "density", main="Grafico de densidad-Precio Internet", xlab = "Numero de precios por ID", ylab ="Density", colour = categoria)
#Internet
qplot(PInt_count, data = Estadisticos, geom = "density",
xlab = "Numero de precios por ID",
ylab ="Densidad", colour = categoria)
#Internet
qplot(PInt_count, data = Estadisticos, geom = "density",
xlab = "Número de precios por ID",
ylab ="Densidad", colour = categoria)
###################
#NUMERO DE CAMBIOS#
###################
rm(list=ls())
"Librerias a utilizar"
options(warn=0)
library(tidyverse)
#library(sqldf)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
options(warn=2)
"Directorio"
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(directorio)
"Cargamos Base de datos"
load(paste0(dirmother, "/Base/Base_Final_Peru_completa_01.RData"))
rm(list=ls())
"Librerias a utilizar"
options(warn=0)
library(tidyverse)
#library(sqldf)
library(readxl)
library(dplyr)
library(stringr)
library(ggplot2)
options(warn=2)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Tabla del proceso anterior"
load("./Estadisticos_precios_01.RData")
Estadisticos$Cambios_Obs=Estadisticos$cambio_total/Estadisticos$PInt_count
View(Estadisticos)
View(Estadisticos)
"Directorio"
rm(list=ls())
directorio = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(directorio)
dirmother = dirname(getwd())
"Tabla del proceso anterior"
load("./Estadisticos_precios_01.RData")
qplot(PInt_count, data = Estadisticos, geom = "histogram", binwidth =8, ylab ="Count"  ,xlab = "Numero de precios por ID")
load("../Base/Base_Final_Peru_completa_01.RData")
View(base_ll)
BASEDATOS <- base_ll
#Cambios
#(4) Creacion del indicador
#-----------------------------------------
#Primero creamos una variable que contenga la diferencia del precio de internet contra su variable rezagada.
#Esto se almacena en evento_internet
BASEDATOS$Evento_internet <- NA
BASEDATOS$Evento_internet[2:nrow(BASEDATOS)] <- BASEDATOS$precio_internet[2:nrow(BASEDATOS)]-
BASEDATOS$precio_internet[1:nrow(BASEDATOS)-1]
#Arreglamos la variable anterior pra que las diferencias se realicen a cada item
BASEDATOS$Indicador <-NA
BASEDATOS$Indicador[2:nrow(BASEDATOS)] <- BASEDATOS$ID[2:nrow(BASEDATOS)]-
BASEDATOS$ID[1:nrow(BASEDATOS)-1]
BASEDATOS$Evento_internet[BASEDATOS$Indicador!=0]<-NA
#Evento es una variable que toma el valor de 1 cuando ha existido un cambio de precios y 0 cuando no.
BASEDATOS$Evento_internet[BASEDATOS$Evento_internet!=0]<-1
View(BASEDATOS)
#Cambios
#(4) Creacion del indicador
#-----------------------------------------
#Primero creamos una variable que contenga la diferencia del precio de internet contra su variable rezagada.
#Esto se almacena en evento_internet
BASEDATOS$Evento_internet <- NA
BASEDATOS$Evento_internet[2:nrow(BASEDATOS)] <- BASEDATOS$precio_internet[2:nrow(BASEDATOS)]-
BASEDATOS$precio_internet[1:nrow(BASEDATOS)-1]
View(BASEDATOS)
#Cambios
#(4) Creacion del indicador
#-----------------------------------------
#Primero creamos una variable que contenga la diferencia del precio de internet contra su variable rezagada.
#Esto se almacena en evento_internet
BASEDATOS$Evento_internet <- NA
BASEDATOS$Evento_internet[2:nrow(BASEDATOS)] <- BASEDATOS$precio_internet_completo[2:nrow(BASEDATOS)]-
BASEDATOS$precio_internet_completo[1:nrow(BASEDATOS)-1]
#Arreglamos la variable anterior pra que las diferencias se realicen a cada item
BASEDATOS$Indicador <-NA
BASEDATOS$Indicador[2:nrow(BASEDATOS)] <- BASEDATOS$ID[2:nrow(BASEDATOS)]-
BASEDATOS$ID[1:nrow(BASEDATOS)-1]
BASEDATOS$Evento_internet[BASEDATOS$Indicador!=0]<-NA
#Evento es una variable que toma el valor de 1 cuando ha existido un cambio de precios y 0 cuando no.
BASEDATOS$Evento_internet[BASEDATOS$Evento_internet!=0]<-1
cambios = BASEDATOS %>% group_by(ID) %>%
summarise(numero_cambios = sum(Evento_internet))
View(cambios)
cambios = BASEDATOS %>% group_by(ID) %>%
summarise(numero_cambios = sum(Evento_internet, na.rm = TRUE))
View(cambios)
cambios = merge(cambios, Estadisticos[c(1,11:14)])
View(cambios)
Estadisticos$Cambios_Obs=Estadisticos$cambio_total/Estadisticos$PInt_count
Estadisticos$Cambios_Obs=Estadisticos$numero_cambios/Estadisticos$PInt_count
View(cambios)
Estadisticos$Cambios_Obs=cambios$numero_cambios/cambios$PInt_count
View(Estadisticos)
Estadisticos$Cambios_Obs=cambios$numero_cambios/cambios$PInt_count
#Agregado
qplot(Cambios_Obs, data= Estadisticos, geom = "histogram")
